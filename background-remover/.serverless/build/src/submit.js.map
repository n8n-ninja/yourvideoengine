{
  "version": 3,
  "sources": ["../../../src/submit.ts", "../../../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/rng.js", "../../../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/stringify.js", "../../../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/native.js", "../../../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v4.js"],
  "sourcesContent": ["import { v4 as uuidv4 } from \"uuid\"\nimport { DynamoDBClient, PutItemCommand } from \"@aws-sdk/client-dynamodb\"\nimport { SQSClient, SendMessageCommand } from \"@aws-sdk/client-sqs\"\n\nconst ddb = new DynamoDBClient({})\nconst sqs = new SQSClient({})\n\nconst JOBS_TABLE = process.env.JOBS_TABLE!\nconst QUEUE_URL = process.env.JOB_QUEUE_URL!\n\nexport const handler = async (event: any) => {\n  console.log(\"submit event\", JSON.stringify(event))\n  const body =\n    typeof event.body === \"string\" ? JSON.parse(event.body) : event.body\n  console.log(\"submit body\", JSON.stringify(body))\n  const inputUrl = body.inputUrl\n  const chromakeyFilter = body.chromakeyFilter\n  if (!inputUrl) {\n    console.log(\"Missing inputUrl\", body)\n    return {\n      statusCode: 400,\n      body: JSON.stringify({ error: \"Missing inputUrl\" }),\n    }\n  }\n  const jobId = uuidv4()\n  const createdAt = new Date().toISOString()\n  console.log(\"putItem\", jobId, inputUrl)\n  // Save job in DynamoDB\n  await ddb.send(\n    new PutItemCommand({\n      TableName: JOBS_TABLE,\n      Item: {\n        jobId: { S: jobId },\n        inputUrl: { S: inputUrl },\n        status: { S: \"PENDING\" },\n        createdAt: { S: createdAt },\n      },\n    }),\n  )\n  console.log(\"putItem done\", jobId)\n  // Push job to SQS\n  await sqs.send(\n    new SendMessageCommand({\n      QueueUrl: QUEUE_URL,\n      MessageBody: JSON.stringify({ jobId, inputUrl, chromakeyFilter }),\n    }),\n  )\n  console.log(\"sendMessage SQS done\", jobId)\n  return {\n    statusCode: 200,\n    body: JSON.stringify({ jobId, status: \"PENDING\" }),\n  }\n}\n", "import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;"],
  "mappings": "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",
  "names": ["crypto", "import_crypto", "crypto"]
}
