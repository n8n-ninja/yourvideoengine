import {
  INodeType,
  INodeTypeDescription,
  IExecuteFunctions,
  NodeConnectionType,
  INodeExecutionData,
} from "n8n-workflow"

export class {{NodeClassName}} implements INodeType {
  description: INodeTypeDescription = {
    displayName: '{{NodeDisplayName}}',
    name: '{{NodeName}}',
    group: ['transform'],
    version: 1,
    icon: "file:heygen.svg",
    description: '{{NodeDescription}}',
    defaults: {
      name: '{{NodeDisplayName}}',
    },
    inputs: [NodeConnectionType.Main],
    outputs: [NodeConnectionType.Main],
    properties: [
      // Champs dynamiques générés
      {{properties}}
      // Champs fixes
    
       {
        displayName: "Client ID",
        name: "clientId",
        type: "string",
        default: "client0",
        required: false,
        description: "Client ID (optionnel)",
      },
    ],
  };

  async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
    const items = this.getInputData();
    const timestamp = Date.now()
    
    const jobs: Record<string, unknown>[] = [];
    for (let i = 0; i < items.length; i++) {
      // Récupérer les paramètres du formulaire
      const params: Record<string, unknown> = {
        {{params}}
      };
      const executionId = this.evaluateExpression(
        "{{$execution.id}}",
        i
      ) as string
      const callbackUrl = this.evaluateExpression(
        "{{$execution.resumeUrl}}",
        i
      ) as string
      const clientId = this.getNodeParameter('clientId', i) as string;
      const payload: Record<string, unknown> = {
        projectId: executionId + "_" + timestamp,
        callbackUrl,
        params: {
          composition: '{{CompositionName}}',
          inputProps: params
        },
        queueType: 'remotion',
      };
      if (clientId) {
        payload.clientId = clientId;
      }
      jobs.push(payload);
    }
    await this.helpers.httpRequest({
      method: 'POST',
      url: process.env.QUEUES_URL!,
      body: jobs,
      json: true,
      headers: {
        'X-Api-Key': process.env.QUEUES_APIKEY!,
      },
    });
    return this.prepareOutputData([{ json: { message: "Job enqueued" } }]);
  }
} 